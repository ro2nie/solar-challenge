service: solar-challenge

plugins:
  - serverless-offline
  - serverless-s3-local
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'test'}
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}}

  environment:
    ENV: ${self:custom.env.${self:provider.stage}}
    STORE_S3_BUCKET: ${self:custom.storeBucket.${self:provider.stage}}
    VERSION: ${file(./package.json):version}
    S3_HOST: ${self:custom.s3.host}
    S3_PORT: ${self:custom.s3.port}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket" 
      Resource: "arn:aws:s3:::${self:custom.deploymentBucket.${self:provider.stage}}/*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket" 
      Resource: "arn:aws:s3:::${self:custom.storeBucket.${self:provider.stage}}/*"

custom:
  s3:
    host: 0.0.0.0
    port: 8001
  storeBucket:
      dev: 'solar-store'
      test: 'solar-store'
      prod: 'solar-store'      
  env:
      dev: 'dev'
      test: 'test'
      prod: 'prod'
  deploymentBucket: 
    dev: ronnie-serverless-deployments
    test: ronnie-serverless-deployments
    prod: ronnie-serverless-deployments

resources:
  Conditions:
    IsDev:
      Fn::Equals:
        - ${opt:stage}
        - dev
  Resources:
    storeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.storeBucket.${self:provider.stage}}
      Condition: IsDev 
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  exclude:
    - test/**
  include:
    - src/**
  excludeDevDependencies: true

functions:
  solar-challenge:
    handler: src/handler.solar
    events:
      - http:
          path: solar-challenge
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
